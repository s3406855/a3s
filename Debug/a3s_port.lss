
a3s_port.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000006d2  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800064  00800064  0000076a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d6  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000371  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a4  00000000  00000000  000012a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fa  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e8  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00001f5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  8a:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init>:
	newFreq = ( ( (float)inputValue / (float)maxPID ) * freqRange ) + minSpeed;

	//set_PWM_freq( new_Freq );
	// NEED TO SET FREQUENCY HERE

	OCR0 = 128; // set duty cycle, 0-255 (255 = 100%)
  92:	8f 92       	push	r8
  94:	9f 92       	push	r9
  96:	af 92       	push	r10
  98:	bf 92       	push	r11
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	53 e4       	ldi	r21, 0x43	; 67
  aa:	60 91 69 00 	lds	r22, 0x0069
  ae:	70 91 6a 00 	lds	r23, 0x006A
  b2:	80 91 6b 00 	lds	r24, 0x006B
  b6:	90 91 6c 00 	lds	r25, 0x006C
  ba:	0e 94 47 02 	call	0x48e	; 0x48e <__mulsf3>
  be:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__fixsfsi>
  c2:	4b 01       	movw	r8, r22
  c4:	5c 01       	movw	r10, r24
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	53 e4       	ldi	r21, 0x43	; 67
  ce:	60 91 6d 00 	lds	r22, 0x006D
  d2:	70 91 6e 00 	lds	r23, 0x006E
  d6:	80 91 6f 00 	lds	r24, 0x006F
  da:	90 91 70 00 	lds	r25, 0x0070
  de:	0e 94 47 02 	call	0x48e	; 0x48e <__mulsf3>
  e2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__fixsfsi>
  e6:	6b 01       	movw	r12, r22
  e8:	7c 01       	movw	r14, r24
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	53 e4       	ldi	r21, 0x43	; 67
  f2:	60 91 60 00 	lds	r22, 0x0060
  f6:	70 91 61 00 	lds	r23, 0x0061
  fa:	80 91 62 00 	lds	r24, 0x0062
  fe:	90 91 63 00 	lds	r25, 0x0063
 102:	0e 94 47 02 	call	0x48e	; 0x48e <__mulsf3>
 106:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__fixsfsi>
 10a:	dc 01       	movw	r26, r24
 10c:	cb 01       	movw	r24, r22
 10e:	21 e7       	ldi	r18, 0x71	; 113
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	a4 01       	movw	r20, r8
 114:	b6 01       	movw	r22, r12
 116:	0e 94 0d 01 	call	0x21a	; 0x21a <pid_Init>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	83 bf       	out	0x33, r24	; 51
 11e:	89 bf       	out	0x39, r24	; 57
 120:	12 be       	out	0x32, r1	; 50
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	a0 e8       	ldi	r26, 0x80	; 128
 128:	bf e3       	ldi	r27, 0x3F	; 63
 12a:	80 93 60 00 	sts	0x0060, r24
 12e:	90 93 61 00 	sts	0x0061, r25
 132:	a0 93 62 00 	sts	0x0062, r26
 136:	b0 93 63 00 	sts	0x0063, r27
 13a:	10 92 6d 00 	sts	0x006D, r1
 13e:	10 92 6e 00 	sts	0x006E, r1
 142:	10 92 6f 00 	sts	0x006F, r1
 146:	10 92 70 00 	sts	0x0070, r1
 14a:	10 92 69 00 	sts	0x0069, r1
 14e:	10 92 6a 00 	sts	0x006A, r1
 152:	10 92 6b 00 	sts	0x006B, r1
 156:	10 92 6c 00 	sts	0x006C, r1
 15a:	10 92 65 00 	sts	0x0065, r1
 15e:	10 92 66 00 	sts	0x0066, r1
 162:	10 92 67 00 	sts	0x0067, r1
 166:	10 92 68 00 	sts	0x0068, r1
 16a:	80 e4       	ldi	r24, 0x40	; 64
 16c:	87 b9       	out	0x07, r24	; 7
 16e:	87 e8       	ldi	r24, 0x87	; 135
 170:	86 b9       	out	0x06, r24	; 6
 172:	1b ba       	out	0x1b, r1	; 27
 174:	1a ba       	out	0x1a, r1	; 26
 176:	18 ba       	out	0x18, r1	; 24
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	87 bb       	out	0x17, r24	; 23
 17c:	85 bb       	out	0x15, r24	; 21
 17e:	14 ba       	out	0x14, r1	; 20
 180:	83 b7       	in	r24, 0x33	; 51
 182:	89 66       	ori	r24, 0x69	; 105
 184:	83 bf       	out	0x33, r24	; 51
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	df 90       	pop	r13
 18c:	cf 90       	pop	r12
 18e:	bf 90       	pop	r11
 190:	af 90       	pop	r10
 192:	9f 90       	pop	r9
 194:	8f 90       	pop	r8
 196:	08 95       	ret

00000198 <Get_Measurement>:
 */
int16_t Get_Measurement(uint8_t ch)
{
  // select adc channel (0-7)
  ch = ch & 7;	// bit masking just ensures that channel can never be > 7
  ADMUX |= ch;
 198:	97 b1       	in	r25, 0x07	; 7
 * This function must return the measured data
 */
int16_t Get_Measurement(uint8_t ch)
{
  // select adc channel (0-7)
  ch = ch & 7;	// bit masking just ensures that channel can never be > 7
 19a:	87 70       	andi	r24, 0x07	; 7
  ADMUX |= ch;
 19c:	98 2b       	or	r25, r24
 19e:	97 b9       	out	0x07, r25	; 7

  // start a conversion by setting ADSC bit in ADCSRA
  ADCSRA |= (1<<ADSC);
 1a0:	36 9a       	sbi	0x06, 6	; 6

  // wait for it to complete: ADIF bit gets set when conversion is complete
  // ASM equiv: sbis	ADCSR, ADIF
  while (!(ADCSRA & (1<<ADIF))) {};
 1a2:	34 9b       	sbis	0x06, 4	; 6
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <Get_Measurement+0xa>

  // clear ADIF
  // From the datasheet i thought this happened automatically, but perhaps not...
  ADCSRA |= (1<<ADIF);
 1a6:	34 9a       	sbi	0x06, 4	; 6
          
  return ADC;
 1a8:	84 b1       	in	r24, 0x04	; 4
 1aa:	95 b1       	in	r25, 0x05	; 5
  //return 4;
}
 1ac:	08 95       	ret

000001ae <Get_Reference>:
 * This will be set by trimpot or button
 * 
 */
int16_t Get_Reference(void)
{
	return REF_VAL * SCALING_FACTOR;
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	53 e4       	ldi	r21, 0x43	; 67
 1b6:	60 91 65 00 	lds	r22, 0x0065
 1ba:	70 91 66 00 	lds	r23, 0x0066
 1be:	80 91 67 00 	lds	r24, 0x0067
 1c2:	90 91 68 00 	lds	r25, 0x0068
 1c6:	0e 94 47 02 	call	0x48e	; 0x48e <__mulsf3>
 1ca:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__fixsfsi>
}
 1ce:	cb 01       	movw	r24, r22
 1d0:	08 95       	ret

000001d2 <main>:

int main(void)
{
	int16_t referenceValue, measurementValue, inputValue, lowMeas, hiMeas;
	
	Init();
 1d2:	0e 94 49 00 	call	0x92	; 0x92 <Init>

	sei();	// set global interrupt flag
 1d6:	78 94       	sei
	newFreq = ( ( (float)inputValue / (float)maxPID ) * freqRange ) + minSpeed;

	//set_PWM_freq( new_Freq );
	// NEED TO SET FREQUENCY HERE

	OCR0 = 128; // set duty cycle, 0-255 (255 = 100%)
 1d8:	68 94       	set
 1da:	ff 24       	eor	r15, r15
 1dc:	f7 f8       	bld	r15, 7
	sei();	// set global interrupt flag
	
	while(1)
	{
		// Run PID calculations once every PID timer timeout
		if(gFlags.pidTimer)
 1de:	80 91 64 00 	lds	r24, 0x0064
 1e2:	81 70       	andi	r24, 0x01	; 1
 1e4:	88 23       	and	r24, r24
 1e6:	f1 f3       	breq	.-4      	; 0x1e4 <main+0x12>
		{
			referenceValue = Get_Reference();
 1e8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Get_Reference>
 1ec:	ec 01       	movw	r28, r24
			lowMeas = Get_Measurement(0);	// read accelerometer attached to wheel
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 cc 00 	call	0x198	; 0x198 <Get_Measurement>
 1f4:	8c 01       	movw	r16, r24
			hiMeas = Get_Measurement(1);	// read accelerometer attached to chassis
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 cc 00 	call	0x198	; 0x198 <Get_Measurement>
			
			measurementValue = hiMeas - lowMeas; //Get_Measurement(0);
 1fc:	bc 01       	movw	r22, r24
 1fe:	60 1b       	sub	r22, r16
 200:	71 0b       	sbc	r23, r17

			inputValue = pid_Controller(referenceValue, measurementValue, &pidData);
 202:	41 e7       	ldi	r20, 0x71	; 113
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	ce 01       	movw	r24, r28
 208:	0e 94 3a 01 	call	0x274	; 0x274 <pid_Controller>
	newFreq = ( ( (float)inputValue / (float)maxPID ) * freqRange ) + minSpeed;

	//set_PWM_freq( new_Freq );
	// NEED TO SET FREQUENCY HERE

	OCR0 = 128; // set duty cycle, 0-255 (255 = 100%)
 20c:	fc be       	out	0x3c, r15	; 60

			inputValue = pid_Controller(referenceValue, measurementValue, &pidData);

			Set_Input(inputValue);

			gFlags.pidTimer = FALSE;
 20e:	80 91 64 00 	lds	r24, 0x0064
 212:	8e 7f       	andi	r24, 0xFE	; 254
 214:	80 93 64 00 	sts	0x0064, r24
 218:	e2 cf       	rjmp	.-60     	; 0x1de <main+0xc>

0000021a <pid_Init>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
// Set up PID controller parameters
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	fb 01       	movw	r30, r22
 220:	e9 01       	movw	r28, r18
	// Start values for PID controller
	pid->sumError = 0;
 222:	1a 82       	std	Y+2, r1	; 0x02
 224:	1b 82       	std	Y+3, r1	; 0x03
 226:	1c 82       	std	Y+4, r1	; 0x04
 228:	1d 82       	std	Y+5, r1	; 0x05
	pid->lastProcessValue = 0;
 22a:	19 82       	std	Y+1, r1	; 0x01
 22c:	18 82       	st	Y, r1
	// Tuning constants for PID loop
	pid->P_Factor = p_factor;
 22e:	9f 83       	std	Y+7, r25	; 0x07
 230:	8e 83       	std	Y+6, r24	; 0x06
	pid->I_Factor = i_factor;
 232:	79 87       	std	Y+9, r23	; 0x09
 234:	68 87       	std	Y+8, r22	; 0x08
	pid->D_Factor = d_factor;
 236:	5b 87       	std	Y+11, r21	; 0x0b
 238:	4a 87       	std	Y+10, r20	; 0x0a
	// Limits to avoid overflow
	pid->maxError = MAX_INT / (pid->P_Factor + 1);
 23a:	bc 01       	movw	r22, r24
 23c:	6f 5f       	subi	r22, 0xFF	; 255
 23e:	7f 4f       	sbci	r23, 0xFF	; 255
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	9f e7       	ldi	r25, 0x7F	; 127
 244:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__divmodhi4>
 248:	7d 87       	std	Y+13, r23	; 0x0d
 24a:	6c 87       	std	Y+12, r22	; 0x0c
	pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
 24c:	9f 01       	movw	r18, r30
 24e:	2f 5f       	subi	r18, 0xFF	; 255
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	03 2e       	mov	r0, r19
 254:	00 0c       	add	r0, r0
 256:	44 0b       	sbc	r20, r20
 258:	55 0b       	sbc	r21, r21
 25a:	6f ef       	ldi	r22, 0xFF	; 255
 25c:	7f ef       	ldi	r23, 0xFF	; 255
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	9f e3       	ldi	r25, 0x3F	; 63
 262:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__divmodsi4>
 266:	2e 87       	std	Y+14, r18	; 0x0e
 268:	3f 87       	std	Y+15, r19	; 0x0f
 26a:	48 8b       	std	Y+16, r20	; 0x10
 26c:	59 8b       	std	Y+17, r21	; 0x11
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <pid_Controller>:
 *	setPoint  Desired value.
 *	processValue  Measured value.
 *	pid_st  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue, struct PID_DATA *pid_st)
{
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	8b 01       	movw	r16, r22
 282:	fa 01       	movw	r30, r20
	int16_t error, p_term, d_term;
	int32_t i_term, ret, temp;

	error = setPoint - processValue;
 284:	86 1b       	sub	r24, r22
 286:	97 0b       	sbc	r25, r23

	// Calculate Pterm and limit error overflow
	if (error > pid_st->maxError)
 288:	24 85       	ldd	r18, Z+12	; 0x0c
 28a:	35 85       	ldd	r19, Z+13	; 0x0d
 28c:	28 17       	cp	r18, r24
 28e:	39 07       	cpc	r19, r25
 290:	84 f0       	brlt	.+32     	; 0x2b2 <pid_Controller+0x3e>
	{
		p_term = MAX_INT;
	}
	else if (error < -pid_st->maxError)
 292:	31 95       	neg	r19
 294:	21 95       	neg	r18
 296:	31 09       	sbc	r19, r1
 298:	82 17       	cp	r24, r18
 29a:	93 07       	cpc	r25, r19
 29c:	6c f0       	brlt	.+26     	; 0x2b8 <pid_Controller+0x44>
	{
		p_term = -MAX_INT;
	}
	else
	{
		p_term = pid_st->P_Factor * error;
 29e:	26 81       	ldd	r18, Z+6	; 0x06
 2a0:	37 81       	ldd	r19, Z+7	; 0x07
 2a2:	82 9f       	mul	r24, r18
 2a4:	e0 01       	movw	r28, r0
 2a6:	83 9f       	mul	r24, r19
 2a8:	d0 0d       	add	r29, r0
 2aa:	92 9f       	mul	r25, r18
 2ac:	d0 0d       	add	r29, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <pid_Controller+0x48>
	error = setPoint - processValue;

	// Calculate Pterm and limit error overflow
	if (error > pid_st->maxError)
	{
		p_term = MAX_INT;
 2b2:	cf ef       	ldi	r28, 0xFF	; 255
 2b4:	df e7       	ldi	r29, 0x7F	; 127
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <pid_Controller+0x48>
	}
	else if (error < -pid_st->maxError)
	{
		p_term = -MAX_INT;
 2b8:	c1 e0       	ldi	r28, 0x01	; 1
 2ba:	d0 e8       	ldi	r29, 0x80	; 128
	{
		p_term = pid_st->P_Factor * error;
	}

	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + error;
 2bc:	09 2e       	mov	r0, r25
 2be:	00 0c       	add	r0, r0
 2c0:	aa 0b       	sbc	r26, r26
 2c2:	bb 0b       	sbc	r27, r27
 2c4:	42 81       	ldd	r20, Z+2	; 0x02
 2c6:	53 81       	ldd	r21, Z+3	; 0x03
 2c8:	64 81       	ldd	r22, Z+4	; 0x04
 2ca:	75 81       	ldd	r23, Z+5	; 0x05
 2cc:	9a 01       	movw	r18, r20
 2ce:	ab 01       	movw	r20, r22
 2d0:	28 0f       	add	r18, r24
 2d2:	39 1f       	adc	r19, r25
 2d4:	4a 1f       	adc	r20, r26
 2d6:	5b 1f       	adc	r21, r27
	
	if(temp > pid_st->maxSumError)
 2d8:	86 85       	ldd	r24, Z+14	; 0x0e
 2da:	97 85       	ldd	r25, Z+15	; 0x0f
 2dc:	a0 89       	ldd	r26, Z+16	; 0x10
 2de:	b1 89       	ldd	r27, Z+17	; 0x11
 2e0:	82 17       	cp	r24, r18
 2e2:	93 07       	cpc	r25, r19
 2e4:	a4 07       	cpc	r26, r20
 2e6:	b5 07       	cpc	r27, r21
 2e8:	4c f4       	brge	.+18     	; 0x2fc <pid_Controller+0x88>
	{
		i_term = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
 2ea:	82 83       	std	Z+2, r24	; 0x02
 2ec:	93 83       	std	Z+3, r25	; 0x03
 2ee:	a4 83       	std	Z+4, r26	; 0x04
 2f0:	b5 83       	std	Z+5, r27	; 0x05
	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + error;
	
	if(temp > pid_st->maxSumError)
	{
		i_term = MAX_I_TERM;
 2f2:	6f ef       	ldi	r22, 0xFF	; 255
 2f4:	7f ef       	ldi	r23, 0xFF	; 255
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	9f e3       	ldi	r25, 0x3F	; 63
 2fa:	1d c0       	rjmp	.+58     	; 0x336 <pid_Controller+0xc2>
		pid_st->sumError = pid_st->maxSumError;
	}
	else if(temp < -pid_st->maxSumError)
 2fc:	b0 95       	com	r27
 2fe:	a0 95       	com	r26
 300:	90 95       	com	r25
 302:	81 95       	neg	r24
 304:	9f 4f       	sbci	r25, 0xFF	; 255
 306:	af 4f       	sbci	r26, 0xFF	; 255
 308:	bf 4f       	sbci	r27, 0xFF	; 255
 30a:	28 17       	cp	r18, r24
 30c:	39 07       	cpc	r19, r25
 30e:	4a 07       	cpc	r20, r26
 310:	5b 07       	cpc	r21, r27
 312:	4c f4       	brge	.+18     	; 0x326 <pid_Controller+0xb2>
	{
		i_term = -MAX_I_TERM;
		pid_st->sumError = -pid_st->maxSumError;
 314:	82 83       	std	Z+2, r24	; 0x02
 316:	93 83       	std	Z+3, r25	; 0x03
 318:	a4 83       	std	Z+4, r26	; 0x04
 31a:	b5 83       	std	Z+5, r27	; 0x05
		i_term = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
	}
	else if(temp < -pid_st->maxSumError)
	{
		i_term = -MAX_I_TERM;
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 ec       	ldi	r25, 0xC0	; 192
 324:	08 c0       	rjmp	.+16     	; 0x336 <pid_Controller+0xc2>
		pid_st->sumError = -pid_st->maxSumError;
	}
	else
	{
		pid_st->sumError = temp;
 326:	22 83       	std	Z+2, r18	; 0x02
 328:	33 83       	std	Z+3, r19	; 0x03
 32a:	44 83       	std	Z+4, r20	; 0x04
 32c:	55 83       	std	Z+5, r21	; 0x05
		i_term = pid_st->I_Factor * pid_st->sumError;
 32e:	a0 85       	ldd	r26, Z+8	; 0x08
 330:	b1 85       	ldd	r27, Z+9	; 0x09
 332:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulshisi3>
	}

	// Calculate Dterm
	d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
 336:	20 81       	ld	r18, Z
 338:	31 81       	ldd	r19, Z+1	; 0x01
 33a:	20 1b       	sub	r18, r16
 33c:	31 0b       	sbc	r19, r17
 33e:	a2 85       	ldd	r26, Z+10	; 0x0a
 340:	b3 85       	ldd	r27, Z+11	; 0x0b
 342:	2a 9f       	mul	r18, r26
 344:	70 01       	movw	r14, r0
 346:	2b 9f       	mul	r18, r27
 348:	f0 0c       	add	r15, r0
 34a:	3a 9f       	mul	r19, r26
 34c:	f0 0c       	add	r15, r0
 34e:	11 24       	eor	r1, r1

	pid_st->lastProcessValue = processValue;
 350:	11 83       	std	Z+1, r17	; 0x01
 352:	00 83       	st	Z, r16

	ret = (p_term + i_term + d_term) / SCALING_FACTOR;
 354:	8e 01       	movw	r16, r28
 356:	dd 0f       	add	r29, r29
 358:	22 0b       	sbc	r18, r18
 35a:	33 0b       	sbc	r19, r19
 35c:	ab 01       	movw	r20, r22
 35e:	bc 01       	movw	r22, r24
 360:	40 0f       	add	r20, r16
 362:	51 1f       	adc	r21, r17
 364:	62 1f       	adc	r22, r18
 366:	73 1f       	adc	r23, r19
 368:	c7 01       	movw	r24, r14
 36a:	ff 0c       	add	r15, r15
 36c:	aa 0b       	sbc	r26, r26
 36e:	bb 0b       	sbc	r27, r27
 370:	48 0f       	add	r20, r24
 372:	59 1f       	adc	r21, r25
 374:	6a 1f       	adc	r22, r26
 376:	7b 1f       	adc	r23, r27
 378:	db 01       	movw	r26, r22
 37a:	ca 01       	movw	r24, r20
 37c:	77 23       	and	r23, r23
 37e:	24 f4       	brge	.+8      	; 0x388 <pid_Controller+0x114>
 380:	81 58       	subi	r24, 0x81	; 129
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	af 4f       	sbci	r26, 0xFF	; 255
 386:	bf 4f       	sbci	r27, 0xFF	; 255
 388:	68 94       	set
 38a:	16 f8       	bld	r1, 6
 38c:	b5 95       	asr	r27
 38e:	a7 95       	ror	r26
 390:	97 95       	ror	r25
 392:	87 95       	ror	r24
 394:	16 94       	lsr	r1
 396:	d1 f7       	brne	.-12     	; 0x38c <pid_Controller+0x118>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	20 e8       	ldi	r18, 0x80	; 128
 39c:	92 07       	cpc	r25, r18
 39e:	2f ef       	ldi	r18, 0xFF	; 255
 3a0:	a2 07       	cpc	r26, r18
 3a2:	b2 07       	cpc	r27, r18
 3a4:	24 f4       	brge	.+8      	; 0x3ae <pid_Controller+0x13a>
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e8       	ldi	r25, 0x80	; 128
 3aa:	af ef       	ldi	r26, 0xFF	; 255
 3ac:	bf ef       	ldi	r27, 0xFF	; 255
 3ae:	81 15       	cp	r24, r1
 3b0:	20 e8       	ldi	r18, 0x80	; 128
 3b2:	92 07       	cpc	r25, r18
 3b4:	a1 05       	cpc	r26, r1
 3b6:	b1 05       	cpc	r27, r1
 3b8:	24 f0       	brlt	.+8      	; 0x3c2 <pid_Controller+0x14e>
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	9f e7       	ldi	r25, 0x7F	; 127
 3be:	a0 e0       	ldi	r26, 0x00	; 0
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
	{
		ret = -MAX_INT;
	}

	return((int16_t)ret);
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	08 95       	ret

000003d0 <__fixsfsi>:
 3d0:	0e 94 ef 01 	call	0x3de	; 0x3de <__fixunssfsi>
 3d4:	68 94       	set
 3d6:	b1 11       	cpse	r27, r1
 3d8:	0c 94 41 02 	jmp	0x482	; 0x482 <__fp_szero>
 3dc:	08 95       	ret

000003de <__fixunssfsi>:
 3de:	0e 94 26 02 	call	0x44c	; 0x44c <__fp_splitA>
 3e2:	88 f0       	brcs	.+34     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 3e4:	9f 57       	subi	r25, 0x7F	; 127
 3e6:	98 f0       	brcs	.+38     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 3e8:	b9 2f       	mov	r27, r25
 3ea:	99 27       	eor	r25, r25
 3ec:	b7 51       	subi	r27, 0x17	; 23
 3ee:	b0 f0       	brcs	.+44     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 3f0:	e1 f0       	breq	.+56     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	88 1f       	adc	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	1a f0       	brmi	.+6      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3fc:	ba 95       	dec	r27
 3fe:	c9 f7       	brne	.-14     	; 0x3f2 <__fixunssfsi+0x14>
 400:	14 c0       	rjmp	.+40     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 402:	b1 30       	cpi	r27, 0x01	; 1
 404:	91 f0       	breq	.+36     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 406:	0e 94 40 02 	call	0x480	; 0x480 <__fp_zero>
 40a:	b1 e0       	ldi	r27, 0x01	; 1
 40c:	08 95       	ret
 40e:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_zero>
 412:	67 2f       	mov	r22, r23
 414:	78 2f       	mov	r23, r24
 416:	88 27       	eor	r24, r24
 418:	b8 5f       	subi	r27, 0xF8	; 248
 41a:	39 f0       	breq	.+14     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 41c:	b9 3f       	cpi	r27, 0xF9	; 249
 41e:	cc f3       	brlt	.-14     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 420:	86 95       	lsr	r24
 422:	77 95       	ror	r23
 424:	67 95       	ror	r22
 426:	b3 95       	inc	r27
 428:	d9 f7       	brne	.-10     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 42a:	3e f4       	brtc	.+14     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
 42c:	90 95       	com	r25
 42e:	80 95       	com	r24
 430:	70 95       	com	r23
 432:	61 95       	neg	r22
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	8f 4f       	sbci	r24, 0xFF	; 255
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	08 95       	ret

0000043c <__fp_split3>:
 43c:	57 fd       	sbrc	r21, 7
 43e:	90 58       	subi	r25, 0x80	; 128
 440:	44 0f       	add	r20, r20
 442:	55 1f       	adc	r21, r21
 444:	59 f0       	breq	.+22     	; 0x45c <__fp_splitA+0x10>
 446:	5f 3f       	cpi	r21, 0xFF	; 255
 448:	71 f0       	breq	.+28     	; 0x466 <__fp_splitA+0x1a>
 44a:	47 95       	ror	r20

0000044c <__fp_splitA>:
 44c:	88 0f       	add	r24, r24
 44e:	97 fb       	bst	r25, 7
 450:	99 1f       	adc	r25, r25
 452:	61 f0       	breq	.+24     	; 0x46c <__fp_splitA+0x20>
 454:	9f 3f       	cpi	r25, 0xFF	; 255
 456:	79 f0       	breq	.+30     	; 0x476 <__fp_splitA+0x2a>
 458:	87 95       	ror	r24
 45a:	08 95       	ret
 45c:	12 16       	cp	r1, r18
 45e:	13 06       	cpc	r1, r19
 460:	14 06       	cpc	r1, r20
 462:	55 1f       	adc	r21, r21
 464:	f2 cf       	rjmp	.-28     	; 0x44a <__fp_split3+0xe>
 466:	46 95       	lsr	r20
 468:	f1 df       	rcall	.-30     	; 0x44c <__fp_splitA>
 46a:	08 c0       	rjmp	.+16     	; 0x47c <__fp_splitA+0x30>
 46c:	16 16       	cp	r1, r22
 46e:	17 06       	cpc	r1, r23
 470:	18 06       	cpc	r1, r24
 472:	99 1f       	adc	r25, r25
 474:	f1 cf       	rjmp	.-30     	; 0x458 <__fp_splitA+0xc>
 476:	86 95       	lsr	r24
 478:	71 05       	cpc	r23, r1
 47a:	61 05       	cpc	r22, r1
 47c:	08 94       	sec
 47e:	08 95       	ret

00000480 <__fp_zero>:
 480:	e8 94       	clt

00000482 <__fp_szero>:
 482:	bb 27       	eor	r27, r27
 484:	66 27       	eor	r22, r22
 486:	77 27       	eor	r23, r23
 488:	cb 01       	movw	r24, r22
 48a:	97 f9       	bld	r25, 7
 48c:	08 95       	ret

0000048e <__mulsf3>:
 48e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__mulsf3x>
 492:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_round>
 496:	0e 94 bd 02 	call	0x57a	; 0x57a <__fp_pscA>
 49a:	38 f0       	brcs	.+14     	; 0x4aa <__mulsf3+0x1c>
 49c:	0e 94 c4 02 	call	0x588	; 0x588 <__fp_pscB>
 4a0:	20 f0       	brcs	.+8      	; 0x4aa <__mulsf3+0x1c>
 4a2:	95 23       	and	r25, r21
 4a4:	11 f0       	breq	.+4      	; 0x4aa <__mulsf3+0x1c>
 4a6:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_inf>
 4aa:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_nan>
 4ae:	11 24       	eor	r1, r1
 4b0:	0c 94 41 02 	jmp	0x482	; 0x482 <__fp_szero>

000004b4 <__mulsf3x>:
 4b4:	0e 94 1e 02 	call	0x43c	; 0x43c <__fp_split3>
 4b8:	70 f3       	brcs	.-36     	; 0x496 <__mulsf3+0x8>

000004ba <__mulsf3_pse>:
 4ba:	95 9f       	mul	r25, r21
 4bc:	c1 f3       	breq	.-16     	; 0x4ae <__mulsf3+0x20>
 4be:	95 0f       	add	r25, r21
 4c0:	50 e0       	ldi	r21, 0x00	; 0
 4c2:	55 1f       	adc	r21, r21
 4c4:	62 9f       	mul	r22, r18
 4c6:	f0 01       	movw	r30, r0
 4c8:	72 9f       	mul	r23, r18
 4ca:	bb 27       	eor	r27, r27
 4cc:	f0 0d       	add	r31, r0
 4ce:	b1 1d       	adc	r27, r1
 4d0:	63 9f       	mul	r22, r19
 4d2:	aa 27       	eor	r26, r26
 4d4:	f0 0d       	add	r31, r0
 4d6:	b1 1d       	adc	r27, r1
 4d8:	aa 1f       	adc	r26, r26
 4da:	64 9f       	mul	r22, r20
 4dc:	66 27       	eor	r22, r22
 4de:	b0 0d       	add	r27, r0
 4e0:	a1 1d       	adc	r26, r1
 4e2:	66 1f       	adc	r22, r22
 4e4:	82 9f       	mul	r24, r18
 4e6:	22 27       	eor	r18, r18
 4e8:	b0 0d       	add	r27, r0
 4ea:	a1 1d       	adc	r26, r1
 4ec:	62 1f       	adc	r22, r18
 4ee:	73 9f       	mul	r23, r19
 4f0:	b0 0d       	add	r27, r0
 4f2:	a1 1d       	adc	r26, r1
 4f4:	62 1f       	adc	r22, r18
 4f6:	83 9f       	mul	r24, r19
 4f8:	a0 0d       	add	r26, r0
 4fa:	61 1d       	adc	r22, r1
 4fc:	22 1f       	adc	r18, r18
 4fe:	74 9f       	mul	r23, r20
 500:	33 27       	eor	r19, r19
 502:	a0 0d       	add	r26, r0
 504:	61 1d       	adc	r22, r1
 506:	23 1f       	adc	r18, r19
 508:	84 9f       	mul	r24, r20
 50a:	60 0d       	add	r22, r0
 50c:	21 1d       	adc	r18, r1
 50e:	82 2f       	mov	r24, r18
 510:	76 2f       	mov	r23, r22
 512:	6a 2f       	mov	r22, r26
 514:	11 24       	eor	r1, r1
 516:	9f 57       	subi	r25, 0x7F	; 127
 518:	50 40       	sbci	r21, 0x00	; 0
 51a:	9a f0       	brmi	.+38     	; 0x542 <__mulsf3_pse+0x88>
 51c:	f1 f0       	breq	.+60     	; 0x55a <__mulsf3_pse+0xa0>
 51e:	88 23       	and	r24, r24
 520:	4a f0       	brmi	.+18     	; 0x534 <__mulsf3_pse+0x7a>
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	bb 1f       	adc	r27, r27
 528:	66 1f       	adc	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	91 50       	subi	r25, 0x01	; 1
 530:	50 40       	sbci	r21, 0x00	; 0
 532:	a9 f7       	brne	.-22     	; 0x51e <__mulsf3_pse+0x64>
 534:	9e 3f       	cpi	r25, 0xFE	; 254
 536:	51 05       	cpc	r21, r1
 538:	80 f0       	brcs	.+32     	; 0x55a <__mulsf3_pse+0xa0>
 53a:	0c 94 b4 02 	jmp	0x568	; 0x568 <__fp_inf>
 53e:	0c 94 41 02 	jmp	0x482	; 0x482 <__fp_szero>
 542:	5f 3f       	cpi	r21, 0xFF	; 255
 544:	e4 f3       	brlt	.-8      	; 0x53e <__mulsf3_pse+0x84>
 546:	98 3e       	cpi	r25, 0xE8	; 232
 548:	d4 f3       	brlt	.-12     	; 0x53e <__mulsf3_pse+0x84>
 54a:	86 95       	lsr	r24
 54c:	77 95       	ror	r23
 54e:	67 95       	ror	r22
 550:	b7 95       	ror	r27
 552:	f7 95       	ror	r31
 554:	e7 95       	ror	r30
 556:	9f 5f       	subi	r25, 0xFF	; 255
 558:	c1 f7       	brne	.-16     	; 0x54a <__mulsf3_pse+0x90>
 55a:	fe 2b       	or	r31, r30
 55c:	88 0f       	add	r24, r24
 55e:	91 1d       	adc	r25, r1
 560:	96 95       	lsr	r25
 562:	87 95       	ror	r24
 564:	97 f9       	bld	r25, 7
 566:	08 95       	ret

00000568 <__fp_inf>:
 568:	97 f9       	bld	r25, 7
 56a:	9f 67       	ori	r25, 0x7F	; 127
 56c:	80 e8       	ldi	r24, 0x80	; 128
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	08 95       	ret

00000574 <__fp_nan>:
 574:	9f ef       	ldi	r25, 0xFF	; 255
 576:	80 ec       	ldi	r24, 0xC0	; 192
 578:	08 95       	ret

0000057a <__fp_pscA>:
 57a:	00 24       	eor	r0, r0
 57c:	0a 94       	dec	r0
 57e:	16 16       	cp	r1, r22
 580:	17 06       	cpc	r1, r23
 582:	18 06       	cpc	r1, r24
 584:	09 06       	cpc	r0, r25
 586:	08 95       	ret

00000588 <__fp_pscB>:
 588:	00 24       	eor	r0, r0
 58a:	0a 94       	dec	r0
 58c:	12 16       	cp	r1, r18
 58e:	13 06       	cpc	r1, r19
 590:	14 06       	cpc	r1, r20
 592:	05 06       	cpc	r0, r21
 594:	08 95       	ret

00000596 <__fp_round>:
 596:	09 2e       	mov	r0, r25
 598:	03 94       	inc	r0
 59a:	00 0c       	add	r0, r0
 59c:	11 f4       	brne	.+4      	; 0x5a2 <__fp_round+0xc>
 59e:	88 23       	and	r24, r24
 5a0:	52 f0       	brmi	.+20     	; 0x5b6 <__fp_round+0x20>
 5a2:	bb 0f       	add	r27, r27
 5a4:	40 f4       	brcc	.+16     	; 0x5b6 <__fp_round+0x20>
 5a6:	bf 2b       	or	r27, r31
 5a8:	11 f4       	brne	.+4      	; 0x5ae <__fp_round+0x18>
 5aa:	60 ff       	sbrs	r22, 0
 5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <__fp_round+0x20>
 5ae:	6f 5f       	subi	r22, 0xFF	; 255
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255
 5b2:	8f 4f       	sbci	r24, 0xFF	; 255
 5b4:	9f 4f       	sbci	r25, 0xFF	; 255
 5b6:	08 95       	ret

000005b8 <__divmodhi4>:
 5b8:	97 fb       	bst	r25, 7
 5ba:	07 2e       	mov	r0, r23
 5bc:	16 f4       	brtc	.+4      	; 0x5c2 <__divmodhi4+0xa>
 5be:	00 94       	com	r0
 5c0:	07 d0       	rcall	.+14     	; 0x5d0 <__divmodhi4_neg1>
 5c2:	77 fd       	sbrc	r23, 7
 5c4:	09 d0       	rcall	.+18     	; 0x5d8 <__divmodhi4_neg2>
 5c6:	0e 94 17 03 	call	0x62e	; 0x62e <__udivmodhi4>
 5ca:	07 fc       	sbrc	r0, 7
 5cc:	05 d0       	rcall	.+10     	; 0x5d8 <__divmodhi4_neg2>
 5ce:	3e f4       	brtc	.+14     	; 0x5de <__divmodhi4_exit>

000005d0 <__divmodhi4_neg1>:
 5d0:	90 95       	com	r25
 5d2:	81 95       	neg	r24
 5d4:	9f 4f       	sbci	r25, 0xFF	; 255
 5d6:	08 95       	ret

000005d8 <__divmodhi4_neg2>:
 5d8:	70 95       	com	r23
 5da:	61 95       	neg	r22
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255

000005de <__divmodhi4_exit>:
 5de:	08 95       	ret

000005e0 <__divmodsi4>:
 5e0:	05 2e       	mov	r0, r21
 5e2:	97 fb       	bst	r25, 7
 5e4:	1e f4       	brtc	.+6      	; 0x5ec <__divmodsi4+0xc>
 5e6:	00 94       	com	r0
 5e8:	0e 94 07 03 	call	0x60e	; 0x60e <__negsi2>
 5ec:	57 fd       	sbrc	r21, 7
 5ee:	07 d0       	rcall	.+14     	; 0x5fe <__divmodsi4_neg2>
 5f0:	0e 94 2b 03 	call	0x656	; 0x656 <__udivmodsi4>
 5f4:	07 fc       	sbrc	r0, 7
 5f6:	03 d0       	rcall	.+6      	; 0x5fe <__divmodsi4_neg2>
 5f8:	4e f4       	brtc	.+18     	; 0x60c <__divmodsi4_exit>
 5fa:	0c 94 07 03 	jmp	0x60e	; 0x60e <__negsi2>

000005fe <__divmodsi4_neg2>:
 5fe:	50 95       	com	r21
 600:	40 95       	com	r20
 602:	30 95       	com	r19
 604:	21 95       	neg	r18
 606:	3f 4f       	sbci	r19, 0xFF	; 255
 608:	4f 4f       	sbci	r20, 0xFF	; 255
 60a:	5f 4f       	sbci	r21, 0xFF	; 255

0000060c <__divmodsi4_exit>:
 60c:	08 95       	ret

0000060e <__negsi2>:
 60e:	90 95       	com	r25
 610:	80 95       	com	r24
 612:	70 95       	com	r23
 614:	61 95       	neg	r22
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	8f 4f       	sbci	r24, 0xFF	; 255
 61a:	9f 4f       	sbci	r25, 0xFF	; 255
 61c:	08 95       	ret

0000061e <__mulshisi3>:
 61e:	b7 ff       	sbrs	r27, 7
 620:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__muluhisi3>

00000624 <__mulohisi3>:
 624:	0e 94 4d 03 	call	0x69a	; 0x69a <__muluhisi3>
 628:	82 1b       	sub	r24, r18
 62a:	93 0b       	sbc	r25, r19
 62c:	08 95       	ret

0000062e <__udivmodhi4>:
 62e:	aa 1b       	sub	r26, r26
 630:	bb 1b       	sub	r27, r27
 632:	51 e1       	ldi	r21, 0x11	; 17
 634:	07 c0       	rjmp	.+14     	; 0x644 <__udivmodhi4_ep>

00000636 <__udivmodhi4_loop>:
 636:	aa 1f       	adc	r26, r26
 638:	bb 1f       	adc	r27, r27
 63a:	a6 17       	cp	r26, r22
 63c:	b7 07       	cpc	r27, r23
 63e:	10 f0       	brcs	.+4      	; 0x644 <__udivmodhi4_ep>
 640:	a6 1b       	sub	r26, r22
 642:	b7 0b       	sbc	r27, r23

00000644 <__udivmodhi4_ep>:
 644:	88 1f       	adc	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	5a 95       	dec	r21
 64a:	a9 f7       	brne	.-22     	; 0x636 <__udivmodhi4_loop>
 64c:	80 95       	com	r24
 64e:	90 95       	com	r25
 650:	bc 01       	movw	r22, r24
 652:	cd 01       	movw	r24, r26
 654:	08 95       	ret

00000656 <__udivmodsi4>:
 656:	a1 e2       	ldi	r26, 0x21	; 33
 658:	1a 2e       	mov	r1, r26
 65a:	aa 1b       	sub	r26, r26
 65c:	bb 1b       	sub	r27, r27
 65e:	fd 01       	movw	r30, r26
 660:	0d c0       	rjmp	.+26     	; 0x67c <__udivmodsi4_ep>

00000662 <__udivmodsi4_loop>:
 662:	aa 1f       	adc	r26, r26
 664:	bb 1f       	adc	r27, r27
 666:	ee 1f       	adc	r30, r30
 668:	ff 1f       	adc	r31, r31
 66a:	a2 17       	cp	r26, r18
 66c:	b3 07       	cpc	r27, r19
 66e:	e4 07       	cpc	r30, r20
 670:	f5 07       	cpc	r31, r21
 672:	20 f0       	brcs	.+8      	; 0x67c <__udivmodsi4_ep>
 674:	a2 1b       	sub	r26, r18
 676:	b3 0b       	sbc	r27, r19
 678:	e4 0b       	sbc	r30, r20
 67a:	f5 0b       	sbc	r31, r21

0000067c <__udivmodsi4_ep>:
 67c:	66 1f       	adc	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	1a 94       	dec	r1
 686:	69 f7       	brne	.-38     	; 0x662 <__udivmodsi4_loop>
 688:	60 95       	com	r22
 68a:	70 95       	com	r23
 68c:	80 95       	com	r24
 68e:	90 95       	com	r25
 690:	9b 01       	movw	r18, r22
 692:	ac 01       	movw	r20, r24
 694:	bd 01       	movw	r22, r26
 696:	cf 01       	movw	r24, r30
 698:	08 95       	ret

0000069a <__muluhisi3>:
 69a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__umulhisi3>
 69e:	a5 9f       	mul	r26, r21
 6a0:	90 0d       	add	r25, r0
 6a2:	b4 9f       	mul	r27, r20
 6a4:	90 0d       	add	r25, r0
 6a6:	a4 9f       	mul	r26, r20
 6a8:	80 0d       	add	r24, r0
 6aa:	91 1d       	adc	r25, r1
 6ac:	11 24       	eor	r1, r1
 6ae:	08 95       	ret

000006b0 <__umulhisi3>:
 6b0:	a2 9f       	mul	r26, r18
 6b2:	b0 01       	movw	r22, r0
 6b4:	b3 9f       	mul	r27, r19
 6b6:	c0 01       	movw	r24, r0
 6b8:	a3 9f       	mul	r26, r19
 6ba:	70 0d       	add	r23, r0
 6bc:	81 1d       	adc	r24, r1
 6be:	11 24       	eor	r1, r1
 6c0:	91 1d       	adc	r25, r1
 6c2:	b2 9f       	mul	r27, r18
 6c4:	70 0d       	add	r23, r0
 6c6:	81 1d       	adc	r24, r1
 6c8:	11 24       	eor	r1, r1
 6ca:	91 1d       	adc	r25, r1
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
